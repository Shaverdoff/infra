# DOCKER OPTIMIZATION SIZE
1) ALLWAYS CLEAR CACHE!
after apt-get and yum or package manager
2) Use .dockerignore
.git
Dockerfile
3) use ALPINE
apk add --no-cache nginx
4) иметь правильный порядок сборки
то что чаще меняется ниже по порядку
то что реже меняется выше по порядку
копирование репы всегда ВНИЗ!
FROM NGINX
RUN apk add --no-cache nginx  # реже меняется выше по порядку
ADD . /opt                    # чаще меняется - ниже

5) Multi-STAGE BUILD
после билда всего приложения через Multi-STAGE можно 

FROM scratch 
COPY --from=build /bin/project /bin project
ENTRYPOINT ["/bin/project"]
CMD ["--help"]

ENTRYPOINT - закидывать сюда бинарник приложения
CMD - сюда кидать флаги для него
6) docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .

7) указываем версии программ не :LATEST
8) docker-compose 
healthcheck:
  test: ["CMD", "php-fpm", "-t"]
  interval: 3s
  timeout: 5s
  retries: 5
  start_period: 1s
  
9) gitlab-ci.yml

docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:${CI_COMMIT_REF_SLUG}_nginx.$CI_PIPELINE_ID ./nginx/

10) в докер-композе можно юзать переменные из гитлаб-ci
