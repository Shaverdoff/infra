alertmanager:
  enabled: true
  ## Alertmanager configuration directives
  config:
    global:
      resolve_timeout: 5m
    # SLACK
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack'
    receivers:
    - name: 'slack'
      slack_configs:
      - channel: '#infra-monitoring'
        send_resolved: true
        icon_url: https://avatars3.githubusercontent.com/u/3380462
        title: |-
          [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
          {{- if gt (len .CommonLabels) (len .GroupLabels) -}}
            {{" "}}(
            {{- with .CommonLabels.Remove .GroupLabels.Names }}
              {{- range $index, $label := .SortedPairs -}}
                {{ if $index }}, {{ end }}
                {{- $label.Name }}="{{ $label.Value -}}"
              {{- end }}
            {{- end -}}
            )
          {{- end }}
        text: >-
          {{ range .Alerts -}}
          *Alert:* {{ .Annotations.title }} test {{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
 
          *Description:* {{ .Annotations.description }}
       
          *Details:*
            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
          {{ end }}


    templates:
    - '/etc/alertmanager/config/*.tmpl'
  tplConfig: false
  templateFiles: {}

grafana:
  enabled: true
  adminPassword: prom-operator
  ingress:
    enabled: true
    annotations:
      'alb.ingress.kubernetes.io/certificate-arn': arn:aws:acm:us-east-2:ID:certificate/ID
      'alb.ingress.kubernetes.io/scheme': internet-facing
      'alb.ingress.kubernetes.io/target-type': instance
      'kubernetes.io/ingress.class': alb
    hosts:
      - grafana-dev.company.com
    paths:
    - /*
    pathType: ImplementationSpecific

prometheus:
  enabled: true
  service:
    type: NodePort
    nodePort: 30901
  ingress:
    enabled: true
    annotations:
      'alb.ingress.kubernetes.io/certificate-arn': arn:aws:acm:us-east-2:ID:certificate/ID
      'alb.ingress.kubernetes.io/scheme': internet-facing
      'alb.ingress.kubernetes.io/target-type': instance
      'kubernetes.io/ingress.class': alb
    hosts:
      - prom-dev.company.com
    paths:
    - /*
    pathType: ImplementationSpecific
  prometheusSpec:
    externalLabels:
      p8s_logzio_name: api-api_dev
    remoteWrite:
    - url: https://listener.logz.io:8053  # The Logz.io Listener URL for your region, configured to use port **8052** for http traffic, or port **8053** for https traffic. 
      bearerToken: TOKEN # The Logz.io Prometheus metrics account token
      remoteTimeout: 30s
      queueConfig:
        batchSendDeadline: 5s  #default = 5s
        maxShards: 10  #default = 1000
        maxSamplesPerSend: 500 #default = 100
        capacity: 10000  #default = 500
    additionalScrapeConfigs:
    - job_name: consul-exporter
      static_configs:
      - targets:
        - consul-exporter-prometheus-consul-exporter.monitoring:9107
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ebs-sc
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    ## If true, a nil or {} value for prometheus.prometheusSpec.probeSelector will cause the
    ## prometheus resource to be created with selectors based on values in the helm deployment,
    ## which will also match the probes created
    ##
    probeSelectorNilUsesHelmValues: true

    ## Probes to be selected for target discovery.
    ## If {}, select all Probes
    ##
    probeSelector: {}
    ## Example which selects Probes with label "prometheus" set to "somelabel"
    # probeSelector:
    #   matchLabels:
    #     prometheus: somelabel

    ## Namespaces to be selected for Probe discovery.
    ## See https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#namespaceselector for usage
    ##
    probeNamespaceSelector: {}
